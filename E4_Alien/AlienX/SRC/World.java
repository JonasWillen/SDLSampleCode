import javax.microedition.lcdui.*;
import javax.microedition.lcdui.game.*;

public class World extends TiledLayer {
    
    private static final int TILE_ROWS = 32;
    private static final int TILE_COLUMNS = 32;
    private static final int TILE_WIDTH = 8;
    private static final int TILE_HEIGHT = 8;
    
    private Sprite tileSprite = new Sprite(Image.createImage(TILE_WIDTH, TILE_HEIGHT));
    
    private static final int[][] tileGrid = new int [][] {
        {0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f},
        {0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x01,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x07,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f},
        {0x0f,0x01,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x00,0x00,0x00,0x04,0x04,0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x07,0x0f},
        {0x0f,0x02,0x00,0x00,0x04,0x04,0x04,0x04,0x04,0x00,0x00,0x00,0x06,0x0a,0x0a,0x02,0x06,0x0a,0x0a,0x02,0x00,0x00,0x00,0x04,0x04,0x04,0x04,0x04,0x00,0x00,0x06,0x0f},
        {0x0f,0x02,0x00,0x06,0x0a,0x0a,0x0a,0x0a,0x0a,0x02,0x00,0x00,0x06,0x0d,0x0d,0x02,0x06,0x0d,0x0d,0x02,0x00,0x00,0x06,0x0a,0x0a,0x0a,0x0a,0x0a,0x02,0x00,0x06,0x0f},
        {0x0f,0x02,0x00,0x00,0x08,0x08,0x08,0x07,0x0d,0x02,0x00,0x00,0x06,0x0f,0x0f,0x02,0x06,0x0f,0x0f,0x02,0x00,0x00,0x06,0x0d,0x01,0x08,0x08,0x08,0x00,0x00,0x06,0x0f},
        {0x0f,0x02,0x00,0x00,0x04,0x04,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x08,0x08,0x00,0x00,0x08,0x08,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x04,0x04,0x00,0x00,0x06,0x0f},
        {0x0f,0x02,0x00,0x06,0x0a,0x0a,0x02,0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x04,0x00,0x00,0x06,0x0a,0x0a,0x02,0x00,0x06,0x0f},
        {0x0f,0x02,0x00,0x06,0x0d,0x0d,0x02,0x00,0x06,0x0a,0x0a,0x03,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x05,0x0a,0x0a,0x02,0x00,0x06,0x0d,0x0d,0x02,0x00,0x06,0x0f},
        {0x0f,0x02,0x00,0x06,0x0f,0x0f,0x02,0x00,0x06,0x0d,0x0d,0x09,0x0a,0x02,0x00,0x00,0x00,0x00,0x06,0x0a,0x0B,0x0d,0x0d,0x02,0x00,0x06,0x0f,0x0f,0x02,0x00,0x06,0x0f},
        {0x0f,0x02,0x00,0x00,0x08,0x08,0x00,0x00,0x06,0x0f,0x0f,0x0C,0x0e,0x02,0x00,0x00,0x00,0x00,0x06,0x0d,0x0e,0x0f,0x0f,0x02,0x00,0x00,0x08,0x08,0x00,0x00,0x06,0x0f},
        {0x0f,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x0f,0x0f,0x01,0x08,0x00,0x00,0x04,0x04,0x00,0x00,0x08,0x07,0x0f,0x0f,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x0f},
        {0x0f,0x03,0x00,0x00,0x04,0x04,0x04,0x00,0x06,0x0f,0x0f,0x02,0x00,0x00,0x06,0x0a,0x0a,0x02,0x00,0x00,0x06,0x0f,0x0f,0x02,0x00,0x04,0x04,0x04,0x00,0x00,0x05,0x0f},
        {0x0f,0x09,0x02,0x06,0x0a,0x0a,0x0a,0x02,0x06,0x0f,0x0f,0x02,0x00,0x00,0x06,0x0d,0x0d,0x02,0x00,0x00,0x06,0x0f,0x0f,0x02,0x06,0x0a,0x0a,0x0a,0x02,0x06,0x0B,0x0f},
        {0x0f,0x0C,0x02,0x06,0x0d,0x0d,0x0d,0x02,0x06,0x0f,0x0f,0x02,0x00,0x00,0x06,0x0f,0x0f,0x02,0x00,0x00,0x06,0x0f,0x0f,0x02,0x06,0x0d,0x0d,0x0d,0x02,0x06,0x0e,0x0f},
        {0x0f,0x0f,0x02,0x06,0x0f,0x0f,0x0f,0x02,0x00,0x08,0x08,0x00,0x00,0x00,0x00,0x08,0x08,0x00,0x00,0x00,0x00,0x08,0x08,0x00,0x06,0x0f,0x0f,0x0f,0x02,0x06,0x0f,0x0f},
        {0x0f,0x0f,0x02,0x06,0x0f,0x0f,0x0f,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x0f,0x0f,0x0f,0x02,0x06,0x0f,0x0f},
        {0x0f,0x0f,0x02,0x06,0x0f,0x0f,0x0f,0x02,0x00,0x00,0x04,0x04,0x04,0x00,0x06,0x0a,0x0a,0x02,0x00,0x04,0x04,0x04,0x00,0x00,0x06,0x0f,0x0f,0x0f,0x02,0x06,0x0f,0x0f},
        {0x0f,0x0f,0x02,0x06,0x0f,0x0f,0x0f,0x02,0x00,0x06,0x0a,0x0a,0x0a,0x02,0x06,0x0d,0x0d,0x02,0x06,0x0a,0x0a,0x0a,0x02,0x00,0x06,0x0f,0x0f,0x0f,0x02,0x06,0x0f,0x0f},
        {0x0f,0x0f,0x02,0x06,0x0f,0x0f,0x0f,0x02,0x00,0x06,0x0d,0x0d,0x0d,0x02,0x06,0x0f,0x0f,0x02,0x06,0x0d,0x0d,0x0d,0x02,0x00,0x06,0x0f,0x0f,0x0f,0x02,0x06,0x0f,0x0f},
        {0x0f,0x01,0x00,0x00,0x08,0x08,0x08,0x00,0x00,0x00,0x08,0x08,0x08,0x00,0x00,0x08,0x08,0x00,0x00,0x08,0x08,0x08,0x00,0x00,0x00,0x08,0x08,0x08,0x00,0x00,0x07,0x0f},
        {0x0f,0x02,0x00,0x00,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x04,0x00,0x00,0x06,0x0f},
        {0x0f,0x02,0x00,0x06,0x0a,0x0a,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x0a,0x0a,0x02,0x00,0x06,0x0f},
        {0x0f,0x02,0x00,0x06,0x0d,0x0d,0x03,0x04,0x04,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x04,0x04,0x04,0x05,0x0d,0x0d,0x02,0x00,0x06,0x0f},
        {0x0f,0x02,0x00,0x06,0x0f,0x0f,0x09,0x0a,0x0a,0x0a,0x0a,0x02,0x00,0x04,0x04,0x00,0x00,0x04,0x04,0x00,0x06,0x0a,0x0a,0x0a,0x0a,0x0B,0x0f,0x0f,0x02,0x00,0x06,0x0f},
        {0x0f,0x02,0x00,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x00,0x06,0x0a,0x0a,0x02,0x06,0x0a,0x0a,0x02,0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x00,0x00,0x06,0x0f},
        {0x0f,0x03,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x0d,0x0d,0x02,0x06,0x0d,0x0d,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x0f},
        {0x0f,0x09,0x0a,0x0a,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x0f,0x0f,0x02,0x06,0x0f,0x0f,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x04,0x05,0x0f},
        {0x0f,0x0C,0x0d,0x0d,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x00,0x00,0x08,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x06,0x0a,0x0a,0x0B,0x0f},
        {0x0f,0x0f,0x0f,0x0f,0x03,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x05,0x0d,0x0d,0x0e,0x0f},
        {0x0f,0x0f,0x0f,0x0f,0x09,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0a,0x0B,0x0f,0x0f,0x0f,0x0f},
        {0x0f,0x0f,0x0f,0x0f,0x0C,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0d,0x0e,0x0f,0x0f,0x0f,0x0f}
    };
    
    public World(Image image) {
        super(TILE_COLUMNS,
                TILE_ROWS,
                image,
                TILE_WIDTH,
                TILE_HEIGHT);
        
        for (int row = 0; row < TILE_ROWS; ++row) {
            for (int column = 0; column < TILE_COLUMNS; ++column) {
                setCell(column, row, tileGrid[row][column] + 1); // TiledLayer tiles start from 1
            }
        }
    }
    
    boolean collidesWithImpassableTile(GameSprite sprite) {
        int x = sprite.getX();
        int y = sprite.getY();
        int height = sprite.getHeight();
        int width = sprite.getWidth();
        
        int rowMin = y / TILE_HEIGHT;
        int rowMax = (y + height - 1) / TILE_HEIGHT;
        int columnMin = x / TILE_WIDTH;
        int columnMax = (x + width - 1) / TILE_WIDTH;
        
        int cell;
        
        for (int row = rowMin; row <= rowMax; ++row) {
            for (int column = columnMin; column <= columnMax; ++column) {
                cell = getCell(column, row);
                if (cell > 0x09) {
                    tileSprite.setPosition(column * TILE_WIDTH, row * TILE_HEIGHT);
                    if (sprite.collidesWith(tileSprite, false))
                        return true;
                }
            }
        }
        
        return false;
    }
}
